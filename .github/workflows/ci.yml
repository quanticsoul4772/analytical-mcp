name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: macos-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Verify package-lock.json
      run: npm audit --audit-level=high
      
    - name: Check API keys configuration
      run: npm run check-api-keys || true
      
    - name: Run TypeScript type checking
      run: npm run typecheck
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check code formatting
      run: npm run format:check
      
    - name: Run unit tests
      run: npm run test:coverage
      env:
        NODE_ENV: test
        CI: true
        
    - name: Run integration tests (no API)
      run: npm run test:integration:no-api
      env:
        NODE_ENV: test
        CI: true
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
          
  performance:
    name: Performance Tests
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmarks
      run: npm run test:performance
      env:
        NODE_ENV: test
        CI: true
        
    - name: Archive performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.json
        
  build:
    name: Build Check
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Verify build output
      run: |
        test -f build/index.js
        test -f build/index.d.ts
        
    - name: Test built server
      run: |
        timeout 10s node build/index.js --help || true
        
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build/
        
  security:
    name: Security Audit
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for known vulnerabilities
      run: |
        # Check if any dependencies have known security issues
        npm ls --depth=0 | grep -i "extraneous\|missing" && exit 1 || echo "Dependencies OK"
        
  docker:
    name: Docker Build
    runs-on: macos-latest
    needs: [test, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: analytical-mcp:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm analytical-mcp:test --help || true
        
  release:
    name: Release Check
    runs-on: macos-latest
    needs: [test, build, security, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Verify release readiness
      run: |
        npm run build
        npm run test:coverage
        npm pack --dry-run
        
    - name: Check version consistency
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "Package version: $PACKAGE_VERSION"
        
        # Add version validation logic here if needed
        
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, build, security, docker]
    if: always()
    
    steps:
    - name: Notify status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ All checks passed!"
        else
          echo "❌ Some checks failed"
          exit 1
        fi